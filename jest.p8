pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
ball = {}
pad = {}
blocks = {}
parts = {}
shake = {}

kinganim = {}

function _init()
	ball = {
	 box = bbox:new{x = 1, y = 1, w=8, h=8},
	 vel = {x = 2, y = 2},
	}
	
	pad = {
	 box = bbox:new{x=44, y=8*13, w=24, h=8},
	}
	
	blocks = {}
	
 for y=0,13 do
  blocks[y] = {}
  for x=0,13 do
   if y < 13 and y%3==1 and band(x,1)==0 then
    blocks[y][x] = 1
   else
    blocks[y][x] = 0
   end
  end
 end
 
 shake = {
  pos={x=0,y=0},
  vel={x=3,y=3},
 }
 
 kinganim = anim:new{
  frame:new{
   sprn=16,
   w=2,
   h=2,
   t=4
  },
  frame:new{
   sprn=18,
   w=2,
   h=2,
   t=4
  }
 }
end

function shakeshack()
 local a = rnd()
 shake.vel.x = 3*cos(a)
 shake.vel.y = 3*sin(a)
end

function updateshake() 
 shake.pos.x += shake.vel.x
 shake.pos.y += shake.vel.y
 if l != 0 then
	 nx = shake.pos.x
	 ny = shake.pos.y
	 ax = -nx/2
	 ay = -ny/2
	 shake.vel.x += ax
	 shake.vel.y += ay
	 shake.vel.x *= 0.8
	 shake.vel.y *= 0.8
	 if abs(ax) < 2 and abs(ay) < 2 and sqrt(shake.vel.x^2+shake.vel.y^2) < 0.2 then
	  shake.vel.x = 0
	  shake.vel.y = 0
	  shake.pos.x = 0
	  shake.pos.y = 0
	 end
	end
end

function throwparts(pos)
 for i=1,3 do
  add(parts, {
   box={
	   x=pos.x,
 	  y=pos.y,
 	 },
   vel={
    x=rnd(2)-1,
    y=rnd(2)-1,
   },
   ttl=20,
  })
 end
end

function updateparts()
 local dead = 0
 for i=1,#parts do
  local c = i-dead
  parts[c].box.x += parts[c].vel.x
  parts[c].box.y += parts[c].vel.y
  parts[c].ttl -= 1
  if parts[c].ttl <= 0 then
   deli(parts,c)
   dead += 1
  end
 end
end

function bordercol()
 x = 0
 y = 0
 if ball.box.x < 0 then
  x = -ball.box.x
 elseif ball.box.x >= 13*8 then
  x = 13*8-ball.box.x
 end
 
 if ball.box.y < 0 then
  y = -ball.box.y
 end
 
 if x == 0 and y == 0 then
  return nil
 end
 
 return {x=x, y=y}
end

function padcol()
 if rectcol(ball.box,pad.box) then
  return {y=pad.box.y - (ball.box.y+8)}
 else
  return nil
 end
end

function setblock(x,y,v)
 if blocks[y] then
  blocks[y][x] = v
 end
end 

function block(x,y)
 if blocks[y] then
  local ret = {
   coords = {y=y},
   box = bbox:new{y=y*8,w=16,h=8},
  }
  local b = blocks[y][x]
  if b and b != 0 then
   ret.box.x = x*8
   ret.coords.x = x
   return ret
  end
  b = blocks[y][x-1]
  if b and b != 0 then
   ret.box.x = (x-1)*8
   ret.coords.x = x-1
   return ret
  end
 end
 return nil
end

function pickblock(pos)
 if pos.x < 0 or pos.x >= 14*8 or
    pos.y < 0 or pos.y >= 14*8 then
  return nil
 end
 return block(pos.x\8,pos.y\8)
end

--  first check x axis movement,
--then y
--  if we're moving left, only
--need to check left edge of ball.
--  can maybe subdivide motion if
--we're crossing a lot of axes
--and might cut/get stuck on corners

function colmap(box)
 local cols = {}
 for b in all({
  pickblock(box:ur()),
  pickblock(box:ul()),
  pickblock(box:dr()),
  pickblock(box:dl())
 }) do
  if b and rectcol(box,b.box) then
   add(cols,b)
  end
 end
 return cols
end

function moveball()
 local ret = {}
 
 ball.box.x += ball.vel.x
 local cols = colmap(ball.box)
 if #cols > 0 then
	 if ball.vel.x > 0 then
	  local left = ball.box:r()
	  for c in all(cols) do
	   if c.box.x < left then
	    left = c.box.x
	    col = c
	   end
	  end
	  ball.box.x = left - ball.box.w
	 else
	  local right = ball.box:l()
	  for c in all(cols) do
	   if c.box:r() > right then
	    right = c.box:r()
	    col = c
	   end
	  end
	  ball.box.x = right
	 end
	 add(ret,col)
	 sfx(3)
	 shakeshack()
	 throwparts(col.box:center())
  ball.vel.x = -ball.vel.x
	end

	ball.box.y += ball.vel.y
 local cols = colmap(ball.box)
 if #cols > 0 then
  local col = nil
	 if ball.vel.y > 0 then
	  local top = ball.box:d()
	  for c in all(cols) do
	   if c.box.y < top then
	    top = c.box.y
	    col = c
	   end
	  end
	  ball.box.y = top - ball.box.h
	 else
	  local bot = ball.box:u()
	  for c in all(cols) do
	   if c.box:d() > bot then
	    bot = c.box:d()
	    col = c
	   end
	  end
	  ball.box.y = bot
	 end
	 add(ret, col)
	 sfx(3)
	 throwparts(col.box:center())
	 shakeshack()
	 ball.vel.y = -ball.vel.y
	end
	
	return ret
end

function _update()
 local cols = moveball()
 for col in all(cols) do
  setblock(col.coords.x, col.coords.y, 0)
 end

 local c = bordercol()
 if c then
  sfx(0)
	 if c.x != 0 then
	  ball.box.x += c.x
	  ball.vel.x = -ball.vel.x
	 end
	 if c.y != 0 then
	  ball.box.y += c.y
	  ball.vel.y = -ball.vel.y
	 end
	end
 c = padcol()
 if c then
  sfx(1)
  ball.box.y += c.y
  ball.vel.y = -ball.vel.y
 end
 
 local b = btn()
 if band(b,0x1) > 0 then pad.box.x -= 3 end
 if band(b,0x2) > 0 then pad.box.x += 3 end
 for y=0,13 do
  for x=0,13 do
   if blocks[y][x]==1 then
    --mset(x+1,y+1,1)
   elseif blocks[y][x-1]==1 then
    --mset(x+1,y+1,2)
   else
    --mset(x+1,y+1,0)
   end
  end
 end
 
 updateshake()
 updateparts()
 kinganim:update()
end

function _draw()
  cls()
  --(shake.pos.x,shake.pos.y)
  map()
  spr(11,ball.box.x+8,ball.box.y+8)
  spr(8,pad.box.x+8,pad.box.y+8,3,1)
  for i=1,#parts do
   if parts[i].ttl > 10 or band(parts[i].ttl, 1)==1 then
    spr(12,parts[i].box.x+8,parts[i].box.y+8)
   end
  end
  
  kinganim:draw(pad.box.x+8,pad.box.y, true)
  --spr(16,pad.box.x+8,pad.box.y,2,2)
end
-->8
bbox = {}

function bbox:new(o)
 o = o or {}
 setmetatable(o, self)
 self.__index = self
 return o
end

function bbox:l()
 return self.x
end

function bbox:r()
 return self.x+self.w
end

function bbox:u()
 return self.y
end

function bbox:d()
 return self.y+self.h
end

function bbox:ul()
 return {x=self.x,y=self.y}
end

function bbox:ur()
 return {x=self:r(),y=self.y}
end

function bbox:dl()
 return {x=self.x,y=self:d()}
end

function bbox:dr()
 return {x=self:d(),y=self:r()}
end

function bbox:center()
 return {x=self.x+self.w/2,
         y=self.y+self.h/2}
end

-- a2 > a1, b2 > b1
function spancol(a1,a2,b1,b2)
 if a1 > b1 then
  return spancol(b1,b2,a1,a2)
 end
 return b1 < a2
end

function rectcol(r1,r2)
 return spancol(r1.x,r1:r(),r2.x,r2:r())
    and spancol(r1.y,r1:d(),r2.y,r2:d())
end
-->8
v2 = {}

function v2:new(o)
 o = o or {}
 if #o == 2 then
  o = {x=o[1],y=o[2]}
 end
 setmetatable(o, self)
 self.__index = self
 return o
end

function v2:len()
 return sqrt(self.x^2 + self.y^2)
end

function v2.__add(a,b)
 return v2:new{
  a.x+b.x,
  a.y+b.y,
 }
end

function v2.__sub(a,b)
 return v2:new{
  a.x-b.x,
  a.y-b.y,
 }
end

function v2.__mul(i,v)
 return v2:new{
  i*v.x,
  i*v.y,
 }
end
-->8
frame = {}

function frame:new(o)
 o = o or {}
 setmetatable(o, self)
 self.__index = self
 return o
end

function frame:draw(x, y, flip_x, flip_y)
 spr(self.sprn, x, y,
     self.w, self.h,
     flip_x, flip_y)
end

anim = {}

function anim:new(o)
 o = o or {}
 setmetatable(o, self)
 self.__index = self
 self.frame_i = 1
 self.frame_t = 0
 return o
end

function anim:draw(x,y, flip_x, flip_y)
 self[self.frame_i]:draw(x,y, flip_x, flip_y)
end

function anim:update()
 self.frame_t += 1
 local frame = self[self.frame_i]
 if self.frame_t >= frame.t then
  --go to next frame
  self.frame_t = 0
  self.frame_i += 1
  if self.frame_i > #self then
    self.frame_i = 1
  end
 end
end
__gfx__
0000000077777777777777aa002200220022076555555555567220022200220000777777777777777777770000777700000aa000000000000000000000000000
000000007aaaa77aaa7aaaa902200220022007656666666656720022022002200766666666666666666666700766666000a7a900000000000000000000000000
007007007aaa777aa7aaaaa92200220022002765777777775670022000220022766555555555555555555567766557760a7aaa90000000000000000000000000
000770007aa777aa7aaaaaa9200220022002276500220022567022002002200276555555555555555555555776555576aaaaaaa9000000000000000000000000
000770007a777aa7aaaaaaa9002200220022076520022002567220022200220076555555555555555555555776555556aaaaaaa9000000000000000000000000
007007007aa7aa7aaaaaaaa902200220022007652200220056720022777777777655555555555555555555577655555609aaaa90000000000000000000000000
000000007aaaaaaaaaaaaaa9220022002200276502200220567002206666666607655555555555555555556007655560009aa900000000000000000000000000
00000000aa9999999999999920022002200227650022002256702200555555550066666666666666666666000076660000099000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000aa02220000000000aa022200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000fff0222000000000fff022200000000000000000000000777777000000000000000000000000000000000000000000000000000000000000000000000
0000000f0ff222000000000f0ff22200000000000000000000000700007000000000000000000000000000000000000000000000000000000000000000000000
000000f4fff22200000000f4fff22200000000000000000000000700007000000000000000000000000000000000000000000000000000000000000000000000
00000f55ff2220000000088a88222000000000000000000007000777077000070000000000000000000000000000000000000000000000000000000000000000
0000088a88822000000000fff8822000000000000000000007700007770000700000000000000000000000000000000000000000000000000000000000000000
000000fff88220000000ffffff822000000d6777766d000000777000000007700000000000000000000000000000000000000000000000000000000000000000
0000ffffff882000000fffffff8820000066777777776d0000000770000077000000000000000000000000000000000000000000000000000000000000000000
000fffffff882000000fffffff882000067777777777760000000077777700000000000000000000000000000000000000000000000000000000000000000000
0003333ffff880000003333ffff88000677766ddd667776d00000000000000000000000000000000000000000000000000000000000000000000000000000000
0055333333288800005533333328880077765000005d677600007777777700000000000000000000000000000000000000000000000000000000000000000000
00223355322888000022335532288800776000000000677700077000000777000000000000000000000000000000000000000000000000000000000000000000
00222222222200000022222222220000760000000000d77700770000000007700000000000000000000000000000000000000000000000000000000000000000
002222222220000000222222222000007d0000000000677707700000000000700000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000700000000000677600000000000000700000000000000000000000000000000000000000000000000000000000000000
0000000000000567776d000000000d77700000000000677600000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000677766000000005777d0000000006777d00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000667776d000000067760000000066776000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000d677776d00000d7776000000667765000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000056777776d000067766000d6777650000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000d67777776d55677766677776000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000d677777777777777777765000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000d677777777777777776d500000000000000000000000000000005ddddd6dd0000000000000000000000000000000000000000000
ddd6666666666ddd5dddddddddddddddddddddddddddddd5333373333333733388888888888888883333933444dddddddddddd44433933339cccddddddddccca
ddddddd66ddddddd65dddddddddddddddddddddddddddd563333f3333333f33388888888888888883f93344ddd100000000001ddd44339f39cccccc76cccccca
ddddddd66dddddddd65ddddddddddd6666ddddddddddd56db3373333e3373333888888888888888839944dd100000000000000001dd4499359cccc7666cccca5
ddddddd66ddddddddd65dddddddd66333366dddddddd56dddb3f33332e3f333388888888888888883344d1000000000000000000001d443359ccccc76ccccca5
ddddddd66dddddddddd65dddddd6333333336dddddd56ddd3373b3333373e3338888888888888888934d100000000000000000000001d439559cccc76cccca55
ddddddd66ddddddddddd65dddd633333333336dddd56dddd33f3db3333f32e33888888888888888834d10000000000000000000000001d435559cccccccca555
ddddddddddddddddddddd65dd63333333333336dd56ddddd3733333337333333888888888888888834d00000000000000000000000000d43555599ccccaa5555
5555555335555555dddddd65633333333333333656dddddd3f3333333f33333388888888888888884d1000000000000000000000000001d45555559999555555
6666666666666666ddddddd600000000555555556ddddddd33733b3333733c3388888888888888884d0000004444444433333333000000d49eeeddddddddeeea
ddddddd66dddddddddddddd600000000555555556ddddddd33f3bd3333f3c13388888888888888884d0000004444444433333333000000d49eeeeee76eeeeeea
ddddddd66dddddddddddddd600000000555555556ddddddd33373333333733338888888888888888d100000044444444333333330000001d59eeee7666eeeea5
ddddddd66dddddddddddddd600000000555555556ddddddd333f3333333f33338888888888888888d000000044444444333333330000000d59eeeee76eeeeea5
ddddddd66dddddddddddddd600000000555555556ddddddd33337333333373338888888888888888d000000044444444333333330000000d559eeee76eeeea55
ddddddd66dddddddddddddd600000000555555556ddddddd3333f3333333f3338888888888888888d000000044444444333333330000000d5559eeeeeeeea555
ddddddddddddddddddddddd600000000555555556ddddddd333b3733333c37338888888888888888d000000044444444333333330000000d555599eeeeaa5555
55555555555555555555555300000000555555553555555533bd3f3333c13f338888888888888888100000004444444433333333000000015555559999555555
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1d33333333333dd11dd33333333333d18888888108888888888188888880888888888881118888888888888888888888
eeeeeeeeeeeeeeeaaeeeeeeeeeeeeeee11d333333333d111111d333333333d118888881000888888888108888801888888888811100888888888881118888888
eeeeeeeeeeeeeeeaaeeeeeeeeeeeeeef111dd33333dd11111111dd33333dd1118888810880888888888100888010888888888110000088888888811100888888
2eeeeeeeeeeeeeaaaaeeeeeeeeeeeeef11111ddddd111111111111ddddd111118888810810888888888810080108888888888110000088888888810000088888
82eeeeeeeeeeeeaaaaeeeeeeeeeeeef8111111111111111991111111111111118888880888888888888880111008888888888100000088888888806010088888
82eeeeeeeeeeeee99eeeeeeeeeeeeef8111111111111111991111111111111118888888008888888888811111000888888888100000088888888101001008888
882eeeeeeeeeaee99eeaeeeeeeeeef88111111111111119999111111111111118888881100088888888811110000008888888100001088888888100000008888
882eeeeeeeea9aeaaea9aeeeeeeeef88511111111111119999111111111111158888811100008888888811110006008888888100100088888888800000008888
8882eeeeeee9e9aaaa9e9eeeeeeef888511111111111111441111111111111158888111100060888888811100000008888881060010008888888880000000888
88882eeeeeeeee9aa9eeeeeeeeef8888351111111111911441191111111111538888111000000888888881000000088888880000010008888888888000800888
888882eeeeeeeee99eeeeeeeeef88888335111111119491991949111111115338888111000000888888888000000888888888000000088888888888110080088
88888822eeeeeeaaaaeeeeeeff888888333511111114149999414111111153338888810000008888888888800088888888888800000888888888881100008888
8888888822eeeee99eeeeeff88888888333351111111114994111111111533338888800000008888888881111100888888888880008888888888811000000888
888888888822eeeeeeeeff8888888888333335111111111441111111115333338888880000088888888811110000088888888111100088888888111000000888
88888888888822eeeeff888888888888333333511111119999111111153333338888811111008888888111000000008888881111000000888888110000000088
88888888888888222288888888888888333333351111111441111111533333338881111000000088888110000000008888811100000000888881000000000088
__map__
42435c5c5c5c5c5c5c5c5c5c5c5c444500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
525c5c5c5c5c5c5c5c5c5c5c5c5c5c5500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
40475c5c5c464a4b4c4d465c5c5c464100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50565c5c5c565a53535d565c5c5c565100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
40465c5c5c4753535353465c5c5c474100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50575c5c5c5653535353565c5c5c565100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
40465c5c5c4664656667465c5c5c464100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50565c5c5c5674757677565c5c5c575100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
40465c5c5c465c74775c475c5c5c464100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50575c5c5c575c5c5c5c565c5c5c565100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
40465c5c5c475c5c5c5c465c5c5c474100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50565c5c5c565c5c5c5c565c5c5c575100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
405b5b5b5b5b5b5b5b5b5b5b5b5b5b4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
505b5b5b5b5b5b5b5b5b5b5b5b5b5b5100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5e5f4e4f5e5f4e4f5e5f4e4f5e5f4e4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5454545454545454545454545454545400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100001315013150161502e1503b1500e0000a00007000070000a0002210023100231002410025100281002a100350003b0003f0003d0000000000000000000000000000000000000000000000000000000000
000100002115021150081500715006150041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0002000012350133501335027350273503f3503f35000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000735007350083500a35023650073501f6500535017650146501165010650116400b6400a6300763004630036300363004630026300263002630036200262002610026100161001610016500000000000
000100001355015550175501c55007550095500e55006550065500655009550105500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0002000034550305502c5503155029550255501555022550205501e5501b550195502655015550135500f5500c5500a5500555001550005500000000000000000000000000000000000000000000000000000000
